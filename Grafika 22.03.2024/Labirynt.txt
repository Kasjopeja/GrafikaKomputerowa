vec3 Line(vec2 uv, vec2 p, vec2 d){
 
 vec3 c = vec3(0.0, 0.0, 0.0);

 if((uv.x > (p.x-d.x)) && (uv.x < (p.x + d.x))
 && (uv.y > (p.y-d.y)) && (uv.y < (p.y + d.y))){

 c = vec3(1.0, 1.0, 1.0);

 }

 return c;
}

vec3 Maze(vec2 uv)
{

    vec3 c = vec3(1.0, 1.0, 1.0); 
    c -= Line(uv, vec2(0.5, 0.0), vec2(0.5, 0.015));
    c -= Line(uv, vec2(0.4, 1.), vec2(0.43,0.015));
    c -= Line(uv, vec2(0.0, 0.25), vec2(0.007, 0.255));
    c -= Line(uv, vec2(0.0, 0.90), vec2(0.007, 0.155));
    c -= Line(uv, vec2(1.0, 0.5), vec2(0.007, 0.505));
    
    c -= Line(uv, vec2(0.415, 0.8), vec2(0.265, 0.005));
    c -= Line(uv, vec2(0.68, 0.63), vec2(0.002, 0.175));
    c -= Line(uv, vec2(0.41, 0.72), vec2(0.0025, 0.085));   
    c -= Line(uv, vec2(0.29, 0.52), vec2(0.0025, 0.087));
    c -= Line(uv, vec2(0.16, 0.52), vec2(0.0025, 0.087));   
    c -= Line(uv, vec2(0.53, 0.41), vec2(0.002, 0.19));
    c -= Line(uv, vec2(0.41, 0.43), vec2(0.12, 0.005));
    c -= Line(uv, vec2(0.28, 0.22), vec2(0.12, 0.005));
    c -= Line(uv, vec2(0.68, 0.22), vec2(0.15, 0.005));
    c -= Line(uv, vec2(0.68, 0.08), vec2(0.002, 0.135));
    c -= Line(uv, vec2(0.83, 0.72), vec2(0.002, 0.275));
    c -= Line(uv, vec2(0.755, 0.45), vec2(0.077, 0.005));
    c -= Line(uv, vec2(0.225, 0.6), vec2(0.065, 0.005));

    
    return c;

}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;

    // Output to screen
    fragColor = vec4(Maze(uv), 1.0);
}